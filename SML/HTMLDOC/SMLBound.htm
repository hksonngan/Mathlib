<HTML>
<HEAD>
<TITLE>class SMLBound</TITLE>
<link href="styles.css" rel="STYLESHEET" type="text/css">
</head>
<BODY LINK="#0000ff" VLINK="#800080">
<P><A NAME="SMLBound"></a>[<A href="index.htm">SML Overview</a>]</P>

<h1>class SMLBound</h1>
<PRE>#include &quot;<A HREF="smlbound.h">smlbound.h</A>&quot;</PRE>

<P><B>SMLBound</B> is an abstract class representing a generic 3D bounding region enclosing a set of other bounds or points. This object can be extended, transformed, checked to see if a point is inside, checked to see if a vector intersects it, and checked to see if it is outside or inside a set of culling planes. Specific implementations of bound object include <A HREF="SMLBoxBound.htm#SMLBoxBound"><B><I>SMLBoxBound</I></B></A> and <A HREF="SMLSphereBound.htm#SMLSphereBound"><B><I>SMLSphereBound</I></B></A>.</P>
<hr>
<H2>Public Interface</H2>
<TABLE CELLSPACING=0 BORDER=0 WIDTH=530>
<TR>
<TD><P><A HREF="SMLBound.htm#constructor">constructors</A></TD>
<TD><P><A HREF="SMLBound.htm#dtor">destructor</A></TD>
<TD><P><A HREF="SMLBound.htm#Clone">Clone</A></TD>
</TR>
<TR>
<TD><P><A HREF="SMLBound.htm#Cull">Cull</A></TD>
<TD><P><A HREF="SMLBound.htm#GetCenter">GetCenter</A></TD>
<TD><P><A HREF="SMLBound.htm#Load">Load</A></TD>
</TR>
<TR>
<TD><P><A HREF="SMLBound.htm#Save">Save</A></TD>
<TD><P><A HREF="SMLBound.htm#SetCenter">SetCenter</A></TD>
<TD><P><A HREF="SMLBound.htm#Transform">Transform</A></TD>
</TR>
<TR>
<TD><P><A HREF="SMLBound.htm#around">around</A></TD>
<TD><P><A HREF="SMLBound.htm#contains">contains</A></TD>
<TD><P><A HREF="SMLBound.htm#extendBy">extendBy</A></TD>
</TR>
<TR>
<TD><P><A HREF="SMLBound.htm#probe">probe</A></TD>
<TD><P>&nbsp;</TD>
<TD><P>&nbsp;</TD>
</TR>
</TABLE>

<HR>

<P><A NAME="constructor"></A>SMLLIBENTRY <B>SMLBound</B>();</P>
<h4>Discussion</h4>
<P>Default SMLbound object constructor. It constructs an empty bound centered at the origin.</P>
<h4>Parameters</h4>
<P>No.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>SMLLIBENTRY <B>SMLBound</B>(const <A HREF="SMLVec3f.htm#SMLVec3f">SMLVec3f</A>&amp; <B><I>smlvec</I></B>);</P>
<h4>Discussion</h4>
<P>SMLBound object constructor. It constructs an empty bound centered at the <B><I>smlvec</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>smlvec</I></B> - reference to SMLVec3f constant object </P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P><A NAME="dtor"></A>SMLLIBENTRY virtual <B>~SMLBound</B>();</P>
<h4>Discussion</h4>
<P>SMLBound object destructor. </P>
<h4>Parameters</h4>
<P>No.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual <A HREF="SMLBound.htm#SMLBound">SMLBound</A>* <A NAME="Clone"><B>Clone</B></A>() = 0;</P>
<P>virtual const <A HREF="SMLBound.htm#SMLBound">SMLBound</A>* <B>Clone</B>() const = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method to clone the current object.</P>
<h4>Parameters</h4>
<P>No.</P>
<h4>Return Value</h4>
<P>Returns pointer or const pointer to copy of this object.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>SMLLIBENTRY void <A NAME="SetCenter"><B>SetCenter</B></A>(float <B><I>x</I></B>, float <B><I>y</I></B>, float <B><I>z</I></B>);</P>
<h4>Discussion</h4>
<P>Sets center of this to <B><I>x, y, z</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>x, y, z</I></B> - coordinates of new center.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>SMLLIBENTRY void <B>SetCenter</B>(const <A HREF="SMLVec3f.htm#SMLVec3f">SMLVec3f</A>&amp; <B><I>smlvec</I></B>);</P>
<h4>Discussion</h4>
<P>Sets center of this to <B><I>smlvec</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>smlvec</I></B> - reference to a constant object of SMLVec3f-type.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>SMLLIBENTRY const <A HREF="SMLVec3f.htm#SMLVec3f">SMLVec3f</A>&amp; <A NAME="GetCenter"><B>GetCenter</B></A>() const;</P>
<h4>Discussion</h4>
<P>Returns center of the bound.</P>
<h4>Parameters</h4>
<P>No.</P>
<h4>Return Value</h4>
<P>Returns reference to a SMLVec3f-type constant object.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual bool <A NAME="Cull"></A><B>Cull</B>(const <A HREF="SMLPlane.htm#SMLPlane">SMLPlane</A>* <B><I>planes</I></B>, int <B><I>numPlane</I></B>) const = 0;</P>
<h4>Discussion</h4>
<p>Pure virtual method to check if the bound lies within frustum created by specified <B><I>planes</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>planes</I></B> - pointer to a constant object of SMLPlane type.</P>
<P><B><I>numPlane</I></B> - number of <B><I>planes</I></B>.</P>
<h4>Return Value</h4>
<P>Returns true if bound is culled, false otherwise.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void <A NAME="around"><B>around</B></A>(const <A HREF="SMLVec3f.htm#SMLVec3f">SMLVec3f</A>* <B><I>points</I></B>, int <B><I>npoints</I></B>) = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method. Current bound is set to include specified <B><I>points</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>pts</I></B> - pointer to a constant object of SMLVec3f type.</P>
<P><B><I>npoints</I></B> - number of points.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void <B>around</B>(const <A HREF="SMLSphereBound.htm#SMLSphereBound">SMLSphereBound</A>** <B><I>spheres</I></B>, int <B><I>nspheres</I></B>) = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method. Current bound is set to include specified <B><I>spheres</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>spheres</I></B> - pointer to a pointer to a constant object of SMLSphereBound type</P>
<P><B><I>nspheres</I></B> - number of spheres.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void <B>around</B>(const <A HREF="SMLBoxBound.htm#SMLBoxBound">SMLBoxBound</A>** <B><I>boxes</I></B>, int <B><I>nboxes</I></B>) = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method. Current bound is set to include specified <B><I>boxes</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>boxes</I></B> - pointer to a pointer to a constant object of SMLSphereBound type</P>
<P><B><I>nboxes</I></B> - number of boxes.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void <B>around</B>(const <A HREF="SMLSphereBound.htm#SMLSphereBound">SMLSphereBound</A>* <B><I>sphere</I></B>) = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method. Current bound is set to include <B><I>sphere</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>sphere</I></B> - pointer to a constant object of SMLSphereBound type</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void <B>around</B>(const <A HREF="SMLBoxBound.htm#SMLBoxBound">SMLBoxBound</A>* <B><I>box</I></B>) = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method. Current bound is set to include <B><I>box</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>box</I></B> - pointer to a constant object of SMLBoxBound type</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void <B>around</B>(const <A HREF="SMLBound.htm#SMLBound">SMLBound</A>* <B><I>bound</I></B>) = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method. Current bound is set to include <B><I>bound</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>bound</I></B> - pointer to a constant object of SMLBound type</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void <B>around</B>(const <A HREF="SMLBound.htm#SMLBound">SMLBound</A>** <B><I>bounds</I></B>, int <B><I>nbounds</I></B>) = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method. Current bound is set to include specified <B><I>bounds</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>bounds</I></B> - pointer to a pointer to a constant object of SMLBound type</P>
<P><B><I>nbounds</I></B> - number of bounds</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void <A NAME="extendBy"></A><B>extendBy</B>(const <A HREF="SMLVec3f.htm#SMLVec3f">SMLVec3f</A>&amp; <B><I>point</I></B>) = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method. Current bound is extended to include <B><I>point</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>point</I></B> - reference to a constant object of SMLVec3f type.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void <B>extendBy</B>(const <A HREF="SMLBoxBound.htm#SMLBoxBound">SMLBoxBound</A>* <B><I>box</I></B>) = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method. Current bound is extended to include <B><I>box</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>box</I></B> - pointer to a constant object of SMLBoxBound type</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void <B>extendBy</B>(const <A HREF="SMLSphereBound.htm#SMLSphereBound">SMLSphereBound</A>* <B><I>sphere</I></B>) = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method. Current bound is extended to include <B><I>sphere</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>sphere</I></B> - pointer to a constant object of SMLSphereBound type</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void <B>extendBy</B>(const <A HREF="SMLBound.htm#SMLBound">SMLBound</A>* <B><I>bound</I></B>);</P>
<h4>Discussion</h4>
<P>Pure virtual method. Current bound is extended to include <B><I>bound</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>bound</I></B> - pointer to a constant object of <B>SMLBound</B> type.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual bool <A NAME="contains"><B>contains</B></A>(const <A HREF="SMLVec3f.htm#SMLVec3f">SMLVec3f</A>&amp; <B><I>point</I></B>) const = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method to check whether bound contains <B><I>point</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>point</I></B> - reference to a constant object of SMLVec3f type.</P>
<h4>Return Value</h4>
<P>Returns true if <B><I>point</I></B> contains in this bound, false otherwise.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual bool <B>contains</B>(const <A HREF="SMLBoxBound.htm#SMLBoxBound">SMLBoxBound</A>* <B><I>box</I></B>) const = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method to check whether bound contains <B><I>box</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>box</I></B> - pointer to a constant object of SMLBoxBound type</P>
<h4>Return Value</h4>
<P>Returns true if <B><I>box</I></B> contains in this bound, false otherwise.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual bool <B>contains</B>(const <A HREF="SMLSphereBound.htm#SMLSphereBound">SMLSphereBound</A>* <B><I>sphere</I></B>) const = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method to check whether bound contains <B><I>sphere</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>sphere</I></B> - pointer to a constant object of SMLSphereBound type</P>
<h4>Return Value</h4>
<P>Returns true if <B><I>sphere</I></B> contains in this bound, false otherwise.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual bool <B>contains</B>(const <A HREF="SMLBound.htm#SMLBound">SMLBound</A>* <B><I>bound</I></B>) = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method to check whether bound contains <B><I>bound</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>bound</I></B> - pointer to a constant object of SMLBound type.</P>
<h4>Return Value</h4>
<P>Returns true if <B><I>bound</I></B> contains in this bound, false otherwise.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void <A NAME="Transform"><B>Transform</B></A>(const <A HREF="SMLBound.htm#SMLBound">SMLBound</A>* <B><I>bound</I></B>, const <A HREF="SMLMatrix4f.htm#SMLMatrix4f">SMLMatrix4f</A>&amp; <B><I>matrix</I></B>) = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method to transform the bound <B><I>bound</I></B> by the <B><I>matrix</I></B> which may include translation, rotation, and scale.</P>
<h4>Parameters</h4>
<P><B><I>bound</I></B> - pointer to a constant object of SMLBound type.</P>
<P><B><I>matrix</I></B> - reference to a constant object of SMLMatrix4f type.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual bool <A NAME="probe"><B>probe</B></A>(const <A HREF="SMLVec3f.htm#SMLVec3f">SMLVec3f</A>&amp; <B><I>p1</I></B>, const <A HREF="SMLVec3f.htm#SMLVec3f">SMLVec3f</A>&amp; <B><I>p2</I></B>, float* <B><I>closeDist</I></B>, float* <B><I>farDist</I></B>) const = 0;</P>
<h4>Discussion</h4>
<P>Pure virtual method to check if the bound is intersected by the vector from <B><I>p1</I></B> to <B><I>p2</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>p1</I></B> - start of the vector.</P>
<P><B><I>p2</I></B> - end of the vector.</P>
<h4>Output Parameters</h4>
<P><B><I>closeDist</I></B> - minimum distance from the vector to the bound.</P>
<P><B><I>farDist</I></B> - maximum distance from the vector to the bound.</P>
<h4>Return Value</h4>
<P>Returns true if intersection is detected.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void <A NAME="Save"><B>Save</B></A>(<A HREF="SMLStream.htm#SMLStream">SMLStream</A>&amp; <B><I>stream</I></B>);</P>
<h4>Discussion</h4>
<P>Virtual method to save current bound in the <B><I>stream</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>stream</I></B> - reference to object of SMLStream type.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void <A NAME="Load"><B>Load</B></A>(<A HREF="SMLStream.htm#SMLStream">SMLStream</A>&amp; <B><I>stream</I></B>);</P>
<h4>Discussion</h4>
<P>Virtual method to load current bound from the <B><I>stream</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>stream</I></B> - reference to object of SMLStream type</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void <B>copyFrom</B>(const <A HREF="SMLBound.htm#SMLBound">SMLBound</A>&amp; <B><I>smlbound</I></B>) = 0;</P>
<h4>Discussion</h4>
<P>Virtual method to copy data from <B><I>smlbound</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>smlbound</I></B> - reference to object of SMLBound type.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void<B> copySame</B>(<A HREF="SMLSphereBound.htm#SMLSphereBound">SMLSphereBound</A>* <B><I>sphere</I></B>) = 0;</P>
<h4>Discussion</h4>
<P>Virtual method to copy data from <B><I>sphere</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>sphere</I></B> - pointer to object of SMLSphereBound type.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>

<P>virtual void<B> copySame</B>(<A HREF="SMLBoxBound.htm#SMLBoxBound">SMLBoxBound</A>* <B><I>box</I></B>) = 0;</P>
<h4>Discussion</h4>
<P>Virtual method to copy data from <B><I>box</I></B>.</P>
<h4>Parameters</h4>
<P><B><I>box</I></B> - pointer to object of SMLBoxBound type.</P>
<p>[<A href="SMLBound.htm#SMLBound">top</A>]</p><hr>
</BODY>
</HTML>
